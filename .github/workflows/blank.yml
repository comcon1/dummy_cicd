# This is a basic workflow to help you get started with Actions

name: TEST_CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      #- name: Run a one-line script
      #  run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Example
        run: |
          
          echo "Currently working in:"
          pwd

          paths=()
          ids=()
          missing_ids=()
          timestamps=()
          
          cd $GITHUB_WORKSPACE/Data/Simulations
          for file in `find . -name "README.yaml"`; do
           # The path to the file
           path=$( echo ${file} | rev | cut -d"/" -f2- | rev )
           paths+=(${path})
           # The ID of the file
           file_ID=$( grep '^ID:' ${file} | cut -d" " -f2 )
           # If the file does not contain an ID
           if ! [ $file_ID ]; then
            ids+=(0)
           else
            ids+=(${file_ID})
           fi
           # The timestamp of the file
           ts=$( git log -1 --pretty="format:%ct" ${file} )
           timestamps+=(${ts})
          done

          echo "Analyzed systems"
          echo ${paths[@]}
          echo "IDs of the systems"
          echo ${ids[@]}
          echo "Timestamps of the files"
          echo ${timestamps[@]}

          echo "Duplicated indices"
          duplicates=$( printf '%s\n' "${ids[@]}"|awk '!($0 in seen){seen[$0];next} 1' )
          echo ${duplicates[@]}

          echo "Unique duplicates"
          unique=$( printf "%s\n" "${duplicates[@]}" | sort -u )
          echo ${unique[@]}

          echo "Max ID value"
          max_id=$(sorted=($(printf '%s\n' "${ids[@]}" | sort -n )); echo ${sorted[${#sorted[@]}-1]})
          echo ${max_id}
